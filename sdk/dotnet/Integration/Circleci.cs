// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Doppler.Integration
{
    /// <summary>
    /// Manage a CircleCI Doppler integration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Doppler = Pulumiverse.Doppler;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var prod = new Doppler.Integration.Circleci("prod", new()
    ///     {
    ///         Name = "Production",
    ///         ApiToken = "my_api_token",
    ///     });
    /// 
    ///     var backendProd = new Doppler.SecretsSync.Circleci("backend_prod", new()
    ///     {
    ///         Integration = prod.Id,
    ///         Project = "backend",
    ///         Config = "prd",
    ///         ResourceType = "project",
    ///         ResourceId = "github/myorg/myproject",
    ///         OrganizationSlug = "myorg",
    ///         DeleteBehavior = "leave_in_target",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DopplerResourceType("doppler:integration/circleci:Circleci")]
    public partial class Circleci : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        /// </summary>
        [Output("apiToken")]
        public Output<string> ApiToken { get; private set; } = null!;

        /// <summary>
        /// The name of the integration
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Circleci resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Circleci(string name, CircleciArgs args, CustomResourceOptions? options = null)
            : base("doppler:integration/circleci:Circleci", name, args ?? new CircleciArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Circleci(string name, Input<string> id, CircleciState? state = null, CustomResourceOptions? options = null)
            : base("doppler:integration/circleci:Circleci", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "apiToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Circleci resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Circleci Get(string name, Input<string> id, CircleciState? state = null, CustomResourceOptions? options = null)
        {
            return new Circleci(name, id, state, options);
        }
    }

    public sealed class CircleciArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiToken", required: true)]
        private Input<string>? _apiToken;

        /// <summary>
        /// A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        /// </summary>
        public Input<string>? ApiToken
        {
            get => _apiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the integration
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public CircleciArgs()
        {
        }
        public static new CircleciArgs Empty => new CircleciArgs();
    }

    public sealed class CircleciState : global::Pulumi.ResourceArgs
    {
        [Input("apiToken")]
        private Input<string>? _apiToken;

        /// <summary>
        /// A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        /// </summary>
        public Input<string>? ApiToken
        {
            get => _apiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public CircleciState()
        {
        }
        public static new CircleciState Empty => new CircleciState();
    }
}
