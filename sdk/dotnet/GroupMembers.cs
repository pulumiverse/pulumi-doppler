// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Doppler
{
    /// <summary>
    /// Manage a Doppler group's memberships.
    /// 
    /// **Note:** The `doppler.GroupMembers` resource will clear/replace all existing memberships.
    /// Multiple `doppler.GroupMembers` resources or combinations of `doppler.GroupMembers` and `doppler.GroupMember` will produce inconsistent behavior.
    /// To non-exclusively manage group memberships, use `doppler.GroupMember` only.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Doppler = Pulumi.Doppler;
    /// using Doppler = Pulumiverse.Doppler;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var engineering = new Doppler.Group("engineering", new()
    ///     {
    ///         Name = "engineering",
    ///     });
    /// 
    ///     var nic = Doppler.GetUser.Invoke(new()
    ///     {
    ///         Email = "nic@doppler.com",
    ///     });
    /// 
    ///     var andre = Doppler.GetUser.Invoke(new()
    ///     {
    ///         Email = "andre@doppler.com",
    ///     });
    /// 
    ///     var engineeringGroupMembers = new Doppler.GroupMembers("engineering", new()
    ///     {
    ///         GroupSlug = engineering.Slug,
    ///         UserSlugs = new[]
    ///         {
    ///             nic.Apply(getUserResult =&gt; getUserResult.Slug),
    ///             andre.Apply(getUserResult =&gt; getUserResult.Slug),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// import using the group slug from the URL:
    /// 
    /// https://dashboard.doppler.com/workplace/[workplace-slug]/team/groups/[group-slug]
    /// 
    /// and the user slugs from the URL:
    /// 
    /// https://dashboard.doppler.com/workplace/[workplace-slug]/team/users/[user-slug]
    /// 
    /// ```sh
    /// $ pulumi import doppler:index/groupMembers:GroupMembers default &lt;group-slug&gt;
    /// ```
    /// </summary>
    [DopplerResourceType("doppler:index/groupMembers:GroupMembers")]
    public partial class GroupMembers : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The slug of the group
        /// </summary>
        [Output("groupSlug")]
        public Output<string> GroupSlug { get; private set; } = null!;

        /// <summary>
        /// A list of user slugs in the group
        /// </summary>
        [Output("userSlugs")]
        public Output<ImmutableArray<string>> UserSlugs { get; private set; } = null!;


        /// <summary>
        /// Create a GroupMembers resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupMembers(string name, GroupMembersArgs args, CustomResourceOptions? options = null)
            : base("doppler:index/groupMembers:GroupMembers", name, args ?? new GroupMembersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GroupMembers(string name, Input<string> id, GroupMembersState? state = null, CustomResourceOptions? options = null)
            : base("doppler:index/groupMembers:GroupMembers", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupMembers resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupMembers Get(string name, Input<string> id, GroupMembersState? state = null, CustomResourceOptions? options = null)
        {
            return new GroupMembers(name, id, state, options);
        }
    }

    public sealed class GroupMembersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The slug of the group
        /// </summary>
        [Input("groupSlug", required: true)]
        public Input<string> GroupSlug { get; set; } = null!;

        [Input("userSlugs", required: true)]
        private InputList<string>? _userSlugs;

        /// <summary>
        /// A list of user slugs in the group
        /// </summary>
        public InputList<string> UserSlugs
        {
            get => _userSlugs ?? (_userSlugs = new InputList<string>());
            set => _userSlugs = value;
        }

        public GroupMembersArgs()
        {
        }
        public static new GroupMembersArgs Empty => new GroupMembersArgs();
    }

    public sealed class GroupMembersState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The slug of the group
        /// </summary>
        [Input("groupSlug")]
        public Input<string>? GroupSlug { get; set; }

        [Input("userSlugs")]
        private InputList<string>? _userSlugs;

        /// <summary>
        /// A list of user slugs in the group
        /// </summary>
        public InputList<string> UserSlugs
        {
            get => _userSlugs ?? (_userSlugs = new InputList<string>());
            set => _userSlugs = value;
        }

        public GroupMembersState()
        {
        }
        public static new GroupMembersState Empty => new GroupMembersState();
    }
}
