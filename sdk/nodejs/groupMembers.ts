// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage a Doppler group's memberships.
 *
 * **Note:** The `doppler.GroupMembers` resource will clear/replace all existing memberships.
 * Multiple `doppler.GroupMembers` resources or combinations of `doppler.GroupMembers` and `doppler.GroupMember` will produce inconsistent behavior.
 * To non-exclusively manage group memberships, use `doppler.GroupMember` only.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as doppler from "@pulumi/doppler";
 * import * as doppler from "@pulumiverse/doppler";
 *
 * const engineering = new doppler.Group("engineering", {name: "engineering"});
 * const nic = doppler.getUser({
 *     email: "nic@doppler.com",
 * });
 * const andre = doppler.getUser({
 *     email: "andre@doppler.com",
 * });
 * const engineeringGroupMembers = new doppler.GroupMembers("engineering", {
 *     groupSlug: engineering.slug,
 *     userSlugs: [
 *         nic.then(nic => nic.slug),
 *         andre.then(andre => andre.slug),
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * import using the group slug from the URL:
 *
 * https://dashboard.doppler.com/workplace/[workplace-slug]/team/groups/[group-slug]
 *
 * and the user slugs from the URL:
 *
 * https://dashboard.doppler.com/workplace/[workplace-slug]/team/users/[user-slug]
 *
 * ```sh
 * $ pulumi import doppler:index/groupMembers:GroupMembers default <group-slug>
 * ```
 */
export class GroupMembers extends pulumi.CustomResource {
    /**
     * Get an existing GroupMembers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupMembersState, opts?: pulumi.CustomResourceOptions): GroupMembers {
        return new GroupMembers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler:index/groupMembers:GroupMembers';

    /**
     * Returns true if the given object is an instance of GroupMembers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupMembers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupMembers.__pulumiType;
    }

    /**
     * The slug of the group
     */
    public readonly groupSlug!: pulumi.Output<string>;
    /**
     * A list of user slugs in the group
     */
    public readonly userSlugs!: pulumi.Output<string[]>;

    /**
     * Create a GroupMembers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupMembersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupMembersArgs | GroupMembersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupMembersState | undefined;
            resourceInputs["groupSlug"] = state ? state.groupSlug : undefined;
            resourceInputs["userSlugs"] = state ? state.userSlugs : undefined;
        } else {
            const args = argsOrState as GroupMembersArgs | undefined;
            if ((!args || args.groupSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupSlug'");
            }
            if ((!args || args.userSlugs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userSlugs'");
            }
            resourceInputs["groupSlug"] = args ? args.groupSlug : undefined;
            resourceInputs["userSlugs"] = args ? args.userSlugs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupMembers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupMembers resources.
 */
export interface GroupMembersState {
    /**
     * The slug of the group
     */
    groupSlug?: pulumi.Input<string>;
    /**
     * A list of user slugs in the group
     */
    userSlugs?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GroupMembers resource.
 */
export interface GroupMembersArgs {
    /**
     * The slug of the group
     */
    groupSlug: pulumi.Input<string>;
    /**
     * A list of user slugs in the group
     */
    userSlugs: pulumi.Input<pulumi.Input<string>[]>;
}
