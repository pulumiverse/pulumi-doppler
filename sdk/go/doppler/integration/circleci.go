// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package integration

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/internal"
)

// Manage a CircleCI Doppler integration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/integration"
//	"github.com/pulumiverse/pulumi-doppler/sdk/go/doppler/secretsSync"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			prod, err := integration.NewCircleci(ctx, "prod", &integration.CircleciArgs{
//				Name:     pulumi.String("Production"),
//				ApiToken: pulumi.String("my_api_token"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretsSync.NewCircleci(ctx, "backend_prod", &secretsSync.CircleciArgs{
//				Integration:      prod.ID(),
//				Project:          pulumi.String("backend"),
//				Config:           pulumi.String("prd"),
//				ResourceType:     pulumi.String("project"),
//				ResourceId:       pulumi.String("github/myorg/myproject"),
//				OrganizationSlug: pulumi.String("myorg"),
//				DeleteBehavior:   pulumi.String("leave_in_target"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Circleci struct {
	pulumi.CustomResourceState

	// A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
	ApiToken pulumi.StringOutput `pulumi:"apiToken"`
	// The name of the integration
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCircleci registers a new resource with the given unique name, arguments, and options.
func NewCircleci(ctx *pulumi.Context,
	name string, args *CircleciArgs, opts ...pulumi.ResourceOption) (*Circleci, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiToken == nil {
		return nil, errors.New("invalid value for required argument 'ApiToken'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ApiToken != nil {
		args.ApiToken = pulumi.ToSecret(args.ApiToken).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Circleci
	err := ctx.RegisterResource("doppler:integration/circleci:Circleci", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCircleci gets an existing Circleci resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCircleci(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CircleciState, opts ...pulumi.ResourceOption) (*Circleci, error) {
	var resource Circleci
	err := ctx.ReadResource("doppler:integration/circleci:Circleci", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Circleci resources.
type circleciState struct {
	// A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
	ApiToken *string `pulumi:"apiToken"`
	// The name of the integration
	Name *string `pulumi:"name"`
}

type CircleciState struct {
	// A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
	ApiToken pulumi.StringPtrInput
	// The name of the integration
	Name pulumi.StringPtrInput
}

func (CircleciState) ElementType() reflect.Type {
	return reflect.TypeOf((*circleciState)(nil)).Elem()
}

type circleciArgs struct {
	// A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
	ApiToken string `pulumi:"apiToken"`
	// The name of the integration
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a Circleci resource.
type CircleciArgs struct {
	// A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
	ApiToken pulumi.StringInput
	// The name of the integration
	Name pulumi.StringInput
}

func (CircleciArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*circleciArgs)(nil)).Elem()
}

type CircleciInput interface {
	pulumi.Input

	ToCircleciOutput() CircleciOutput
	ToCircleciOutputWithContext(ctx context.Context) CircleciOutput
}

func (*Circleci) ElementType() reflect.Type {
	return reflect.TypeOf((**Circleci)(nil)).Elem()
}

func (i *Circleci) ToCircleciOutput() CircleciOutput {
	return i.ToCircleciOutputWithContext(context.Background())
}

func (i *Circleci) ToCircleciOutputWithContext(ctx context.Context) CircleciOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircleciOutput)
}

// CircleciArrayInput is an input type that accepts CircleciArray and CircleciArrayOutput values.
// You can construct a concrete instance of `CircleciArrayInput` via:
//
//	CircleciArray{ CircleciArgs{...} }
type CircleciArrayInput interface {
	pulumi.Input

	ToCircleciArrayOutput() CircleciArrayOutput
	ToCircleciArrayOutputWithContext(context.Context) CircleciArrayOutput
}

type CircleciArray []CircleciInput

func (CircleciArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Circleci)(nil)).Elem()
}

func (i CircleciArray) ToCircleciArrayOutput() CircleciArrayOutput {
	return i.ToCircleciArrayOutputWithContext(context.Background())
}

func (i CircleciArray) ToCircleciArrayOutputWithContext(ctx context.Context) CircleciArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircleciArrayOutput)
}

// CircleciMapInput is an input type that accepts CircleciMap and CircleciMapOutput values.
// You can construct a concrete instance of `CircleciMapInput` via:
//
//	CircleciMap{ "key": CircleciArgs{...} }
type CircleciMapInput interface {
	pulumi.Input

	ToCircleciMapOutput() CircleciMapOutput
	ToCircleciMapOutputWithContext(context.Context) CircleciMapOutput
}

type CircleciMap map[string]CircleciInput

func (CircleciMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Circleci)(nil)).Elem()
}

func (i CircleciMap) ToCircleciMapOutput() CircleciMapOutput {
	return i.ToCircleciMapOutputWithContext(context.Background())
}

func (i CircleciMap) ToCircleciMapOutputWithContext(ctx context.Context) CircleciMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircleciMapOutput)
}

type CircleciOutput struct{ *pulumi.OutputState }

func (CircleciOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Circleci)(nil)).Elem()
}

func (o CircleciOutput) ToCircleciOutput() CircleciOutput {
	return o
}

func (o CircleciOutput) ToCircleciOutputWithContext(ctx context.Context) CircleciOutput {
	return o
}

// A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
func (o CircleciOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Circleci) pulumi.StringOutput { return v.ApiToken }).(pulumi.StringOutput)
}

// The name of the integration
func (o CircleciOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Circleci) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CircleciArrayOutput struct{ *pulumi.OutputState }

func (CircleciArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Circleci)(nil)).Elem()
}

func (o CircleciArrayOutput) ToCircleciArrayOutput() CircleciArrayOutput {
	return o
}

func (o CircleciArrayOutput) ToCircleciArrayOutputWithContext(ctx context.Context) CircleciArrayOutput {
	return o
}

func (o CircleciArrayOutput) Index(i pulumi.IntInput) CircleciOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Circleci {
		return vs[0].([]*Circleci)[vs[1].(int)]
	}).(CircleciOutput)
}

type CircleciMapOutput struct{ *pulumi.OutputState }

func (CircleciMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Circleci)(nil)).Elem()
}

func (o CircleciMapOutput) ToCircleciMapOutput() CircleciMapOutput {
	return o
}

func (o CircleciMapOutput) ToCircleciMapOutputWithContext(ctx context.Context) CircleciMapOutput {
	return o
}

func (o CircleciMapOutput) MapIndex(k pulumi.StringInput) CircleciOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Circleci {
		return vs[0].(map[string]*Circleci)[vs[1].(string)]
	}).(CircleciOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CircleciInput)(nil)).Elem(), &Circleci{})
	pulumi.RegisterInputType(reflect.TypeOf((*CircleciArrayInput)(nil)).Elem(), CircleciArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CircleciMapInput)(nil)).Elem(), CircleciMap{})
	pulumi.RegisterOutputType(CircleciOutput{})
	pulumi.RegisterOutputType(CircleciArrayOutput{})
	pulumi.RegisterOutputType(CircleciMapOutput{})
}
