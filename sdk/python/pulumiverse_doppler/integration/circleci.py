# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CircleciArgs', 'Circleci']

@pulumi.input_type
class CircleciArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        The set of arguments for constructing a Circleci resource.
        :param pulumi.Input[str] api_token: A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        :param pulumi.Input[str] name: The name of the integration
        """
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        """
        A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CircleciState:
    def __init__(__self__, *,
                 api_token: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Circleci resources.
        :param pulumi.Input[str] api_token: A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        :param pulumi.Input[str] name: The name of the integration
        """
        if api_token is not None:
            pulumi.set(__self__, "api_token", api_token)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> Optional[pulumi.Input[str]]:
        """
        A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class Circleci(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manage a CircleCI Doppler integration.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_doppler as doppler

        prod = doppler.integration.Circleci("prod",
            name="Production",
            api_token="my_api_token")
        backend_prod = doppler.secrets_sync.Circleci("backend_prod",
            integration=prod.id,
            project="backend",
            config="prd",
            resource_type="project",
            resource_id="github/myorg/myproject",
            organization_slug="myorg",
            delete_behavior="leave_in_target")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_token: A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        :param pulumi.Input[str] name: The name of the integration
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CircleciArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a CircleCI Doppler integration.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_doppler as doppler

        prod = doppler.integration.Circleci("prod",
            name="Production",
            api_token="my_api_token")
        backend_prod = doppler.secrets_sync.Circleci("backend_prod",
            integration=prod.id,
            project="backend",
            config="prd",
            resource_type="project",
            resource_id="github/myorg/myproject",
            organization_slug="myorg",
            delete_behavior="leave_in_target")
        ```

        :param str resource_name: The name of the resource.
        :param CircleciArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CircleciArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CircleciArgs.__new__(CircleciArgs)

            if api_token is None and not opts.urn:
                raise TypeError("Missing required property 'api_token'")
            __props__.__dict__["api_token"] = None if api_token is None else pulumi.Output.secret(api_token)
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Circleci, __self__).__init__(
            'doppler:integration/circleci:Circleci',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_token: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'Circleci':
        """
        Get an existing Circleci resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_token: A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        :param pulumi.Input[str] name: The name of the integration
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CircleciState.__new__(_CircleciState)

        __props__.__dict__["api_token"] = api_token
        __props__.__dict__["name"] = name
        return Circleci(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Output[str]:
        """
        A CircleCI API token. See https://docs.doppler.com/docs/circleci for details.
        """
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the integration
        """
        return pulumi.get(self, "name")

