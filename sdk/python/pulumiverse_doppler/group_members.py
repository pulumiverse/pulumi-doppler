# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GroupMembersArgs', 'GroupMembers']

@pulumi.input_type
class GroupMembersArgs:
    def __init__(__self__, *,
                 group_slug: pulumi.Input[str],
                 user_slugs: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        The set of arguments for constructing a GroupMembers resource.
        :param pulumi.Input[str] group_slug: The slug of the group
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_slugs: A list of user slugs in the group
        """
        pulumi.set(__self__, "group_slug", group_slug)
        pulumi.set(__self__, "user_slugs", user_slugs)

    @property
    @pulumi.getter(name="groupSlug")
    def group_slug(self) -> pulumi.Input[str]:
        """
        The slug of the group
        """
        return pulumi.get(self, "group_slug")

    @group_slug.setter
    def group_slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_slug", value)

    @property
    @pulumi.getter(name="userSlugs")
    def user_slugs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of user slugs in the group
        """
        return pulumi.get(self, "user_slugs")

    @user_slugs.setter
    def user_slugs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "user_slugs", value)


@pulumi.input_type
class _GroupMembersState:
    def __init__(__self__, *,
                 group_slug: Optional[pulumi.Input[str]] = None,
                 user_slugs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering GroupMembers resources.
        :param pulumi.Input[str] group_slug: The slug of the group
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_slugs: A list of user slugs in the group
        """
        if group_slug is not None:
            pulumi.set(__self__, "group_slug", group_slug)
        if user_slugs is not None:
            pulumi.set(__self__, "user_slugs", user_slugs)

    @property
    @pulumi.getter(name="groupSlug")
    def group_slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the group
        """
        return pulumi.get(self, "group_slug")

    @group_slug.setter
    def group_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_slug", value)

    @property
    @pulumi.getter(name="userSlugs")
    def user_slugs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of user slugs in the group
        """
        return pulumi.get(self, "user_slugs")

    @user_slugs.setter
    def user_slugs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_slugs", value)


class GroupMembers(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_slug: Optional[pulumi.Input[str]] = None,
                 user_slugs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manage a Doppler group's memberships.

        **Note:** The `GroupMembers` resource will clear/replace all existing memberships.
        Multiple `GroupMembers` resources or combinations of `GroupMembers` and `GroupMember` will produce inconsistent behavior.
        To non-exclusively manage group memberships, use `GroupMember` only.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_doppler as doppler
        import pulumiverse_doppler as doppler

        engineering = doppler.Group("engineering", name="engineering")
        nic = doppler.get_user(email="nic@doppler.com")
        andre = doppler.get_user(email="andre@doppler.com")
        engineering_group_members = doppler.GroupMembers("engineering",
            group_slug=engineering.slug,
            user_slugs=[
                nic.slug,
                andre.slug,
            ])
        ```

        ## Import

        import using the group slug from the URL:

        https://dashboard.doppler.com/workplace/[workplace-slug]/team/groups/[group-slug]

        and the user slugs from the URL:

        https://dashboard.doppler.com/workplace/[workplace-slug]/team/users/[user-slug]

        ```sh
        $ pulumi import doppler:index/groupMembers:GroupMembers default <group-slug>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_slug: The slug of the group
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_slugs: A list of user slugs in the group
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupMembersArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a Doppler group's memberships.

        **Note:** The `GroupMembers` resource will clear/replace all existing memberships.
        Multiple `GroupMembers` resources or combinations of `GroupMembers` and `GroupMember` will produce inconsistent behavior.
        To non-exclusively manage group memberships, use `GroupMember` only.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_doppler as doppler
        import pulumiverse_doppler as doppler

        engineering = doppler.Group("engineering", name="engineering")
        nic = doppler.get_user(email="nic@doppler.com")
        andre = doppler.get_user(email="andre@doppler.com")
        engineering_group_members = doppler.GroupMembers("engineering",
            group_slug=engineering.slug,
            user_slugs=[
                nic.slug,
                andre.slug,
            ])
        ```

        ## Import

        import using the group slug from the URL:

        https://dashboard.doppler.com/workplace/[workplace-slug]/team/groups/[group-slug]

        and the user slugs from the URL:

        https://dashboard.doppler.com/workplace/[workplace-slug]/team/users/[user-slug]

        ```sh
        $ pulumi import doppler:index/groupMembers:GroupMembers default <group-slug>
        ```

        :param str resource_name: The name of the resource.
        :param GroupMembersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupMembersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_slug: Optional[pulumi.Input[str]] = None,
                 user_slugs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupMembersArgs.__new__(GroupMembersArgs)

            if group_slug is None and not opts.urn:
                raise TypeError("Missing required property 'group_slug'")
            __props__.__dict__["group_slug"] = group_slug
            if user_slugs is None and not opts.urn:
                raise TypeError("Missing required property 'user_slugs'")
            __props__.__dict__["user_slugs"] = user_slugs
        super(GroupMembers, __self__).__init__(
            'doppler:index/groupMembers:GroupMembers',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_slug: Optional[pulumi.Input[str]] = None,
            user_slugs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'GroupMembers':
        """
        Get an existing GroupMembers resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_slug: The slug of the group
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_slugs: A list of user slugs in the group
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupMembersState.__new__(_GroupMembersState)

        __props__.__dict__["group_slug"] = group_slug
        __props__.__dict__["user_slugs"] = user_slugs
        return GroupMembers(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupSlug")
    def group_slug(self) -> pulumi.Output[str]:
        """
        The slug of the group
        """
        return pulumi.get(self, "group_slug")

    @property
    @pulumi.getter(name="userSlugs")
    def user_slugs(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of user slugs in the group
        """
        return pulumi.get(self, "user_slugs")

